[[breaking-changes-6.3]]
== Breaking changes in 6.3

[[breaking_63_plugins_changes]]
=== Plugins changes

==== GCS Repository plugin

* The repository settings `application_name`, `connect_timeout` and `read_timeout` have been deprecated and
must now be specified in the client settings instead.

See {plugins}/repository-gcs-client.html#repository-gcs-client[Google Cloud Storage Client Settings].

==== Ingest Geoip Plugin

* In earlier versions, database files have been stored as gzip compressed files with the extension `.gz` to
save disk space. As a consequence, database files had to be loaded in memory. Now the default database files
that are stored uncompressed as `.mmdb` files which allows to memory-map them and save heap memory. Any
custom database files must also be stored uncompressed. Consequently, the `database_file` property in any
ingest pipelines that use the Geoip Processor must refer to the uncompressed database files as well.

==== Using the plugin installer without a TTY

The Elasticsearch plugin installer (`elasticsearch-plugin install`) would
previously silently accept additional security permissions required by a plugin
if standard input was closed or there was no TTY attached (e.g., `docker exec
<container ID> elasticsearch-plugin install`). This silent accepting of
additional security permissions has been removed. Now, a user must deliberately
accept these permissions either by keeping standard input open and attaching a
TTY (i.e., using interactive mode to accept the permissions), or by passing the
`--batch` flag.

==== Concurrency level of analyze requests

Previously, analyze requests would run on the same thread pool as indexing
requests. The `index` thread pool has been deprecated as it is no longer needed
since indexing requests are internally converted to bulk requests and run on the
`bulk` thread pool. This leaves analyze requests without a home so we added a
small thread pool called the `analyze` thread pool. This thread pool defaults to
having one thread and a queue depth of sixteen requests. This means that
previously analyze requests had a level of concurrency equal to the size of the
`index` thread pool and now they have a level of concurrency of one. For most
users we think this is fine as analyze requests are useful for debugging and so
probably do not see high concurrency. If you are impacted by this you can
increase the size of the thread pool by using the `thread_pool.analyze.size`
setting.
